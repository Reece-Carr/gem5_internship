//SLICC.ModularSLICC.msg.GenMsgEnum
enumeration(CoherenceMessageType, desc="Types of coherence messages") {
  Fwd_GetM, desc="Fwd_GetM";
  Fwd_GetS, desc="Fwd_GetS";
  GetM, desc="GetM";
  GetM_Ack_AD, desc="GetM_Ack_AD";
  GetM_Ack_D, desc="GetM_Ack_D";
  GetS, desc="GetS";
  GetS_Ack, desc="GetS_Ack";
  Inv, desc="Inv";
  Inv_Ack, desc="Inv_Ack";
  PutE, desc="PutE";
  PutM, desc="PutM";
  PutS, desc="PutS";
  Put_Ack, desc="Put_Ack";
  WB, desc="WB";

}
//SLICC.ModularSLICC.msg.GenMsgStruct
structure(CoherenceMessage, desc="...", interface="Message") {
  Addr LineAddress,             desc="Physical address for this request";
  CoherenceMessageType Type,   desc="Type of request (GetS, GetM, PutM, etc)";
  MachineID Sender,            desc="Node who initiated the request";
  NetDest Destination,         desc="Multicast destination mask";
  MessageSizeType MessageSize, desc="size category of the message";
  DataBlock cl, desc="Cache line / Data cl";
  int acksExpected, desc="Integer acksExpected";


  bool functionalRead(Packet *pkt) {
    // A check on message type should appear here so that only those
    // messages that contain data
    return testAndRead(LineAddress, cl, pkt);
  }

  bool functionalWrite(Packet *pkt) {
    // No check on message type required since the protocol should read
    // data block from only those messages that contain valid data
    return testAndWrite(LineAddress, cl, pkt);
  }
}
//SLICC.ModularSLICC.msg.GenDMADefault
enumeration(DMARequestType, desc="...", default="DMARequestType_NULL") {
  READ,          desc="Memory Read";
  WRITE,         desc="Memory Write";
  NULL,          desc="Invalid";
}

enumeration(DMAResponseType, desc="...", default="DMAResponseType_NULL") {
  DATA,          desc="DATA read";
  ACK,           desc="ACK write";
  NULL,          desc="Invalid";
}

structure(DMARequestMsg, desc="...", interface="Message") {
  DMARequestType Type,       desc="Request type (read/write)";
  Addr PhysicalAddress,   desc="Physical address for this request";
  Addr LineAddress,       desc="Line address for this request";
  MachineID Requestor,            desc="Node who initiated the request";
  NetDest Destination,       desc="Destination";
  DataBlock DataBlk,         desc="DataBlk attached to this request";
  int Len,                   desc="The length of the request";
  MessageSizeType MessageSize, desc="size category of the message";

  bool functionalRead(Packet *pkt) {
    return testAndRead(LineAddress, DataBlk, pkt);
  }

  bool functionalWrite(Packet *pkt) {
    return testAndWrite(LineAddress, DataBlk, pkt);
  }
}

structure(DMAResponseMsg, desc="...", interface="Message") {
  DMAResponseType Type,      desc="Response type (DATA/ACK)";
  Addr PhysicalAddress,   desc="Physical address for this request";
  Addr LineAddress,       desc="Line address for this request";
  NetDest Destination,       desc="Destination";
  DataBlock DataBlk,         desc="DataBlk attached to this request";
  MessageSizeType MessageSize, desc="size category of the message";

  bool functionalRead(Packet *pkt) {
    return testAndRead(LineAddress, DataBlk, pkt);
  }

  bool functionalWrite(Packet *pkt) {
    return testAndWrite(LineAddress, DataBlk, pkt);
  }
}
